<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Output paths -->
  <PropertyGroup>
    <BuildInputPath>$(MSBuildProjectDirectory)\</BuildInputPath>
    <DirectoryBuildPropsPath>$(MSBuildThisFileDirectory)Directory.Build.props</DirectoryBuildPropsPath>
  </PropertyGroup>

  <PropertyGroup>
    <UnitTestsSuffix Condition="'$(UnitTestsSuffix)'==''">.Tests</UnitTestsSuffix>

    <MSDeployToolPathAvailable>False</MSDeployToolPathAvailable>
    <MSDeployToolPathAvailable Condition="Exists('$(MSDeployToolPath)')">True</MSDeployToolPathAvailable>
  </PropertyGroup>



  <!-- The following generates dependencies on external tools on NuGet, that can be restored -->
  <PropertyGroup>
    <RestoreGraphProjectInput>$(MSBuildProjectFullPath)</RestoreGraphProjectInput>
    <TargetFramework>net8.0</TargetFramework>
  </PropertyGroup>

  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" /> <!-- cf. https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-use-project-sdk -->

  <ItemGroup>
    <PackageReference Include="ReportGenerator" Version="5.4.17" />
  </ItemGroup>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" /> <!-- cf. https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-use-project-sdk -->



  <!-- Prepare -->
  <Target Name="Prepare" DependsOnTargets="Restore">
    <MakeDir Directories="$(BaseBuildOutputPath)" />
  </Target>



  <!-- Clean -->
  <Target Name="Clean">
    <RemoveDir Directories="$(BaseBuildOutputPath)" />
  </Target>

  <Target Name="CleanProjects">
    <!-- Redirecting intermediates won't work, so trying to make sure here: https://github.com/dotnet/sdk/issues/3485 -->
    <MSBuild
      Projects="%(Projects.Identity)"
      RebaseOutputs="True"
      Properties="Configuration=%(Projects.Configuration);Platform=%(Projects.Platform);%(Projects.Properties)"
      Targets="Clean"
    />
  </Target>

  <Target Name="CleanTestProjects"
    Outputs="%(TestProjects.RootDir)%(TestProjects.Directory)\obj\dummy.txt"
    DependsOnTargets="_GetTestProjects"
  >
    <!-- Redirecting intermediates won't work, so trying to make sure here: https://github.com/dotnet/sdk/issues/3485 -->
    <MSBuild
      Projects="%(TestProjects.Identity)"
      RebaseOutputs="True"
      Properties="Configuration=Release"
      Targets="Clean"
    />
  </Target>



  <!-- Compile -->
  <Target Name="Compile" DependsOnTargets="Prepare;CompileProject" />

  <Target Name="CompileProject">
    <MSBuild
      Projects="%(Projects.Identity)"
      RebaseOutputs="True"
      Properties="Configuration=%(Projects.Configuration);Platform=%(Projects.Platform);DirectoryBuildPropsPath=$(DirectoryBuildPropsPath);%(Projects.Properties)"
      Targets="Restore;Build"
    />
  </Target>



  <!-- Test -->
  <Target Name="Test" DependsOnTargets="Prepare;TestProject;GenerateTestReports" />

  <Target Name="_GetTestProjects"
    Returns="@(TestProjects)"
    BeforeTargets="TestProject"
  >
    <ItemGroup>
      <TestProjects Include="$(BuildInputPath)**\*$(UnitTestsSuffix).csproj" Exclude="$(BaseBuildOutputPath)**\*.*" />
    </ItemGroup>
  </Target>

  <Target Name="_GetCoverageResults"
    Returns="@(CoverageResults)"
    BeforeTargets="GenerateTestReports"
  >
    <ItemGroup>
      <CoverageResults Include="$(BuildTestIntermediateOutputPath)results\**\coverage.cobertura.xml" />
    </ItemGroup>
  </Target>

  <Target Name="TestProject"
    Outputs="$(BuildTestIntermediateOutputPath)results\%(TestProjects.Filename)\TestResults.xml"
    DependsOnTargets="_GetTestProjects"
  >
    <!--  Using solutions for unit tests won't work: https://github.com/Microsoft/vstest/issues/411
          Redirecting intermediates won't work either: https://github.com/dotnet/sdk/issues/3485 -->
    <ItemGroup>
      <_VsTestLoggers Include="xunit" /> <!-- Don't forget to reference XunitXml.TestLogger in the test projects... -->
      <_VsTestLoggers Condition="'$(VSTEST_LOGGER)' != ''" Include="$(VSTEST_LOGGER)" />
      <_VsTestTestAdapterPaths Include="$(BuildInputPath)" />
      <_VsTestTestAdapterPaths Condition="'$(VSTEST_TESTADAPTERPATH)' != ''" Include="$(VSTEST_TESTADAPTERPATH)" />
    </ItemGroup>
    <PropertyGroup>
      <_VSTestResultsPath>$(BuildTestIntermediateOutputPath)results\%(TestProjects.Filename)\</_VSTestResultsPath>
      <_VsTestLogger>@(_VsTestLoggers->'%(Identity)')</_VsTestLogger>
      <_VsTestTestAdapterPath>@(_VsTestTestAdapterPaths->'%(Identity)')</_VsTestTestAdapterPath>
    </PropertyGroup>
    <ItemGroup>
      <_TestProperties Include="IsTestProject=True" />
      <_TestProperties Include="VSTestNoLogo=True" />
      <_TestProperties Include="VSTestNoBuild=False" />
      <_TestProperties Include="VSTestBlame=True" />
      <_TestProperties Include="VSTestVerbosity=normal" />
      <_TestProperties Include="VSTestResultsDirectory=$(_VSTestResultsPath)" />
      <_TestProperties Include="VSTestTestAdapterPath=$(_VsTestTestAdapterPath)" />
      <_TestProperties Include="VSTestCollect=XPlat Code Coverage" />
      <_TestProperties Include="VSTestLogger=$(_VsTestLogger)" />
      <_TestProperties Condition="Exists('$(BuildInputPath)$(MSBuildProjectName)$(UnitTestsSuffix).runsettings')" Include="VSTestSetting=$(BuildInputPath)$(MSBuildProjectName)$(UnitTestsSuffix).runsettings" />
    </ItemGroup>

    <RemoveDir Directories="$(_VSTestResultsPath)" />
    <MSBuild
      Projects="%(TestProjects.Identity)"
      RebaseOutputs="True"
      Properties="Configuration=Release;DirectoryBuildPropsPath=$(DirectoryBuildPropsPath);@(_TestProperties)"
      Targets="Restore;VSTest"
    />
    <OnError ExecuteTargets="_CopyTestResults" />
  </Target>

  <Target Name="_CopyTestResults"
    Outputs="$(BuildTestIntermediateOutputPath)results\%(TestProjects.Filename)\TestResults.xml"
    AfterTargets="TestProject"
  >
    <Copy
      Condition="Exists('$(BuildTestIntermediateOutputPath)results\%(TestProjects.Filename)\TestResults.xml')"
      SourceFiles="$(BuildTestIntermediateOutputPath)results\%(TestProjects.Filename)\TestResults.xml"
      DestinationFiles="$(BaseBuildOutputPath)%(TestProjects.Filename)-xunit-results.xml"
    />
  </Target>
 

  <!-- Split the target in 2 so that the condition can be evaluated -->
  <Target Name="GenerateTestReports" DependsOnTargets="TestProject;_GetCoverageResults" />
  <Target Name="_GenerateTestReports"
    Condition="'@(CoverageResults)' != ''"
    AfterTargets="GenerateTestReports"
  >
    <ReportGenerator ReportFiles="@(CoverageResults)" TargetDirectory="$(BaseBuildOutputPath)$(MSBuildProjectName)-cobertura-results" ReportTypes="HtmlInline;Cobertura" VerbosityLevel="Info" />
    <Move SourceFiles="$(BaseBuildOutputPath)$(MSBuildProjectName)-cobertura-results\Cobertura.xml" DestinationFiles="$(BaseBuildOutputPath)$(MSBuildProjectName)-cobertura-results.xml" />

    <XmlPeek XmlInputPath="$(BaseBuildOutputPath)$(MSBuildProjectName)-cobertura-results.xml" Query="/coverage/@line-rate">
      <Output TaskParameter="Result" ItemName="CoverageLineRate" />
    </XmlPeek>
    <Message Importance="High" Text="Line coverage: @(CoverageLineRate)" />
  </Target>



  <!-- Analysis -->
  <Target Name="Analyze" DependsOnTargets="Prepare;CountLoc" />

  <Target Name="CountLoc">
    <PropertyGroup>
      <ClocResultsFile>$(BaseBuildOutputPath)cloc-results.xml</ClocResultsFile>
      <_ClocCommand Condition="'$(OS)'=='Windows_NT'">&quot;$(BuildInputPath).tmp\cloc.exe&quot;</_ClocCommand>
      <_ClocCommand Condition="'$(_ClocCommand)'==''">perl &quot;$(BuildInputPath).tmp/cloc.pl&quot;</_ClocCommand>
    </PropertyGroup>
    <Exec
      Command="$(_ClocCommand) &quot;$(BuildInputPath)\&quot; --exclude-dir=.tmp,.vs,.vscode,bin,build,doc,lib,obj,tmp,GeneratedCode --exclude-ext=csproj,dbmdl,proj,sln,sqlproj,suo,user --3 --quiet --progress-rate=0 --xml --report_file=&quot;$(ClocResultsFile)&quot;"
      WorkingDirectory="$(InputPath)"
      YieldDuringToolExecution="True"
      IgnoreExitCode="True"
    />
  </Target>



  <!-- Package -->
  <Target Name="Package" DependsOnTargets="Prepare;PackageProject" />

  <Target Name="PackageProject">
    <MSBuild
      Projects="%(Projects.Identity)"
      RebaseOutputs="True"
      Properties="Configuration=%(Projects.Configuration);Platform=%(Projects.Platform);DirectoryBuildPropsPath=$(DirectoryBuildPropsPath);%(Projects.Properties)"
      Targets="Restore;Pack"
    />
  </Target>



  <!-- Build -->
  <Target Name="Build" DependsOnTargets="Compile;Test;Analyze" />
  <!-- Rebuild -->
  <Target Name="Rebuild" DependsOnTargets="Clean;Build" />
  <!-- Release -->
  <Target Name="Release" DependsOnTargets="Rebuild;Package" />
</Project>
